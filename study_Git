//学习Git总结：一些常用的命令
*初始化一个Git仓库，使用git init命令。
*添加文件到Git仓库，分两步：
	使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	使用命令git commit -m <message>，完成。
	
*要随时掌握工作区的状态，使用git status命令。
*如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

*HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
*穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数
*要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
*查看某一文件的内容可以使用 cat <file>

*文本文件被修改，状态为untracked，文件被修改，状态为modified
*git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂
存区的所有修改提交到分支。

*提交后，用git diff HEAD -- <file>命令可以查看工作区和版本库里面最新版本的区别
*Git是如何跟踪修改的?每次修改，如果不用git add到暂存区，那就不会加入到commit中

*场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
*场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命
令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。
	git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
*场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

*命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件
到最新版本，你会丢失最近一次提交后你修改的内容。
*一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了: rm test.txt
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt
	git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
	
*要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
*关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
*此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

*要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
*Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

*Git鼓励大量使用分支：
	查看分支：git branch
	创建分支：git branch <name>
	切换分支：git checkout <name>
	创建+切换分支：git checkout -b <name>
	合并某分支到当前分支：git merge <name>
	删除分支：git branch -d <name>
	
*当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。
用git log --graph命令可以看到分支合并图。
	git log --graph --pretty=oneline --abbrev-commit可以看到很简洁的提交
	
*在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分
支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
*Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward
合并就看不出来曾经做过合并。
	准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：git merge --no-ff -m "merge with no-ff" dev
	
*修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当
前分支，避免重复劳动。
*工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了

*开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

*但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
master分支是主分支，因此要时刻与远程同步；
dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
*因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin <branch-name>推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。
*你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
git checkout -b dev origin/dev
*查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

*rebase操作可以把本地未push的分叉提交历史整理成直线；
rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。

*命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
命令git tag可以查看所有标签。
用命令git show <tagname>可以看到说明文字

*命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

*在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

*忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

*我们只需要敲一行命令，告诉Git，以后st就表示status：git config --global alias.st status
	--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
	配置一个git last，让其显示最后一次提交信息：git config --global alias.last 'log -1'
	git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

//一些学习的时候遇到的问题以及解决方法：（！！！表示遇到的比较多）
1.Warning: Permanently added the RSA host key for IP address '13.250.177.223' to the list of known hos
https://blog.csdn.net/hunhun1122/article/details/79752125
！！！2.如何在hosts文件添加自己想要解析的网站？及修改hosts的作用
https://www.cnblogs.com/nufangrensheng/p/3236025.html
！！！3.如何解决 failed to push some refs to
https://zhinan.sogou.com/guide/detail/?id=316513444271
4.升级oh_my_zsh报错：“oh my zsh  Cannot pull with rebase: You have unstaged changes. Please commit or stash them. There was an error updating. Try again later?”
https://www.jianshu.com/p/57c241ef9d72?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes
5.fatal: Unable to create '/.git/index.lock': File exists 的解决方法
https://blog.csdn.net/mixi57/article/details/51615737
6.【GitHub】解决ERROR: Repository not found。fatal: Could not read from remote repository.
https://blog.csdn.net/weixin_40886892/article/details/80725071
7.Warning: Permanently added the RSA host key for IP address '192.30.253.113' to the list of known hosts. Permission denied (publickey). fatal: Could not read from remote repository. Please make sure y
https://www.cnblogs.com/qcwblog/p/5709720.html